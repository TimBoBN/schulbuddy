name: Build and Publish Docker Image

on:
  push:
    branches: [ main, dev ]
    # Optional: Pfad-Filter hinzufügen, wenn du nur bei Änderungen an bestimmten Dateien bauen möchtest
    # paths:
    #   - 'app/**'
    #   - 'Dockerfile'
    #   - 'docker-compose.yml'
  
  # Manuelle Ausführung über die GitHub UI ermöglichen
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository_owner }}/schulbuddy
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=branch
            type=sha,format=short

      # Set up QEMU
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64,arm

      # Verbesserte QEMU-Konfiguration
      - name: Set up QEMU emulation
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-user-static binfmt-support
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
          echo "Verifying QEMU installations:"
          ls -la /proc/sys/fs/binfmt_misc/
          
      # Zwei-stufiger Build-Prozess mit separaten Dockerfiles
      - name: Build and Push AMD64 Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}-amd64
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build and Push ARM Images
        uses: docker/build-push-action@v4
        continue-on-error: true  # Erlaubt Fortfahren auch bei ARM-Fehlern
        with:
          context: .
          file: ./Dockerfile.arm
          push: true
          platforms: linux/arm64,linux/arm/v7
          tags: ${{ steps.meta.outputs.tags }}-arm
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      # Multi-Arch-Manifest erstellen
      - name: Create and Push Multi-Arch Manifest
        if: success()
        run: |
          # Tag-Namen extrahieren
          IFS=',' read -ra TAGS <<< "${{ steps.meta.outputs.tags }}"
          
          for TAG in "${TAGS[@]}"; do
            echo "Creating manifest for $TAG"
            docker manifest create $TAG \
              $TAG-amd64 \
              $TAG-arm || true
              
            docker manifest push $TAG || true
          done
