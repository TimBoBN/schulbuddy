name: AMD64 Docker Build and Push

on:
  push:
    branches: [ main, dev ]
    tags:
      - 'v*' # Wird ausgeführt, wenn Tags wie v1.0.0, v1.1.0 etc. gepusht werden
  
  # Manuelle Ausführung über die GitHub UI ermöglichen
  workflow_dispatch:
    inputs:
      version_tag:
        description: 'Version tag für das Docker Image (z.B. v1.1.0)'
        required: true
        default: 'latest'

jobs:
  amd64-docker-build-push:
    runs-on: ubuntu-latest
    
    # Wichtige Berechtigungen für GHCR
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract Version and Owner
        id: vars
        run: |
          # Extrahiere Version
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            # Manueller Trigger - verwende Input
            echo "VERSION=${{ github.event.inputs.version_tag }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            # Tag-Push - verwende Tag
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            # Branch-Push - verwende Branch-Namen
            BRANCH=${GITHUB_REF#refs/heads/}
            echo "VERSION=${BRANCH}-$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT
          fi
          
          # Repository Owner in Kleinbuchstaben
          echo "OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
      
      # Vorbereiten der Build-Umgebung für bessere Kompatibilität
      - name: Set up BuildKit Cache
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-unified-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-unified-
      
      # AMD64 Build und Push zu beiden Registries in einem Schritt
      - name: Build and Push AMD64 Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64
          build-args: |
            BUILDKIT_INLINE_CACHE=1
          cache-from: |
            type=local,src=/tmp/.buildx-cache
            type=gha,scope=amd64-build
          cache-to: |
            type=local,dest=/tmp/.buildx-cache-new,mode=max
            type=gha,scope=amd64-build,mode=max
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/schulbuddy:${{ steps.vars.outputs.VERSION }}-amd64
            ghcr.io/${{ steps.vars.outputs.OWNER }}/schulbuddy:${{ steps.vars.outputs.VERSION }}-amd64
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.created=${{ github.event.repository.created_at }}
            org.opencontainers.image.revision=${{ github.sha }}
      
      # Tag-Handling für Docker Hub
      - name: Tag DockerHub Images
        if: success()
        run: |
          # Latest-Tag für main/tags/workflow_dispatch
          if [[ "${{ github.ref }}" == "refs/heads/main" || "${{ github.ref }}" == refs/tags/v* || "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.version_tag }}" != "dev" ]]; then
            docker tag ${{ secrets.DOCKERHUB_USERNAME }}/schulbuddy:${{ steps.vars.outputs.VERSION }}-amd64 ${{ secrets.DOCKERHUB_USERNAME }}/schulbuddy:latest-amd64
            docker push ${{ secrets.DOCKERHUB_USERNAME }}/schulbuddy:latest-amd64
            
            # Auch für GitHub Container Registry
            docker tag ghcr.io/${{ steps.vars.outputs.OWNER }}/schulbuddy:${{ steps.vars.outputs.VERSION }}-amd64 ghcr.io/${{ steps.vars.outputs.OWNER }}/schulbuddy:latest-amd64
            docker push ghcr.io/${{ steps.vars.outputs.OWNER }}/schulbuddy:latest-amd64
          fi
          
          # Dev-Tag für dev Branch
          if [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            docker tag ${{ secrets.DOCKERHUB_USERNAME }}/schulbuddy:${{ steps.vars.outputs.VERSION }}-amd64 ${{ secrets.DOCKERHUB_USERNAME }}/schulbuddy:dev-amd64
            docker push ${{ secrets.DOCKERHUB_USERNAME }}/schulbuddy:dev-amd64
            
            # Auch für GitHub Container Registry
            docker tag ghcr.io/${{ steps.vars.outputs.OWNER }}/schulbuddy:${{ steps.vars.outputs.VERSION }}-amd64 ghcr.io/${{ steps.vars.outputs.OWNER }}/schulbuddy:dev-amd64
            docker push ghcr.io/${{ steps.vars.outputs.OWNER }}/schulbuddy:dev-amd64
          fi
      
      # Versionstagless-Images für DockerHub erstellen
      - name: Create Version Image for DockerHub
        if: success()
        run: |
          docker tag ${{ secrets.DOCKERHUB_USERNAME }}/schulbuddy:${{ steps.vars.outputs.VERSION }}-amd64 ${{ secrets.DOCKERHUB_USERNAME }}/schulbuddy:${{ steps.vars.outputs.VERSION }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/schulbuddy:${{ steps.vars.outputs.VERSION }}
          
          # Auch für GitHub Container Registry
          docker tag ghcr.io/${{ steps.vars.outputs.OWNER }}/schulbuddy:${{ steps.vars.outputs.VERSION }}-amd64 ghcr.io/${{ steps.vars.outputs.OWNER }}/schulbuddy:${{ steps.vars.outputs.VERSION }}
          docker push ghcr.io/${{ steps.vars.outputs.OWNER }}/schulbuddy:${{ steps.vars.outputs.VERSION }}

      # Cache aktualisieren für nächsten Lauf
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache || true
