name: Combined CI/CD Pipeline

on:
  push:
    branches: [ main, dev ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Python Tests zuerst ausf√ºhren
  python-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest flake8 black
    
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run basic tests
      run: |
        export FLASK_ENV=testing
        export SECRET_KEY=test-secret-key
        export DATABASE_URL=sqlite:///test.db
        python -c "from app import create_app; app = create_app(); print('App creation successful')"

  # Docker Build und Test
  docker-build:
    needs: python-test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
    
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Docker Integration Test
  docker-test:
    needs: docker-build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Test Docker image
      run: |
        # Teste das lokale Image
        docker build -t schulbuddy:test .
        
        # Starte Container
        docker run -d --name schulbuddy-test -p 5000:5000 \
          -e SECRET_KEY=test-secret-key-for-github-actions \
          -e DATABASE_URL=sqlite:////tmp/test.db \
          -e FLASK_ENV=production \
          schulbuddy:test
        
        # Warte auf Start und zeige Logs
        sleep 10
        echo "üìã Container logs:"
        docker logs schulbuddy-test
        
        # Warte noch etwas mehr
        sleep 20
        
        # Health-Check mit Retry-Logic
        echo "üîç Testing basic connectivity first..."
        for i in {1..5}; do
          if curl -f http://localhost:5000/ping; then
            echo "‚úÖ Basic ping test passed"
            break
          fi
          echo "‚è≥ Ping attempt $i failed, retrying..."
          sleep 3
        done
        
        echo "üè• Testing health endpoint..."
        for i in {1..10}; do
          if curl -f http://localhost:5000/health; then
            echo "‚úÖ Health check passed"
            break
          fi
          echo "‚è≥ Health check attempt $i failed, retrying..."
          sleep 5
        done
        
        # Finaler Health-Check
        curl -f http://localhost:5000/health || exit 1
        
        # Zus√§tzliche Tests
        echo "üß™ Running additional endpoint tests..."
        curl -f http://localhost:5000/ || echo "‚ö†Ô∏è Main page not accessible (expected for auth)"
        
        # Cleanup
        docker stop schulbuddy-test
        docker rm schulbuddy-test

  # Python Package erstellen
  python-package:
    needs: python-test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Create deployment package
      run: |
        # Installiere Dependencies und erstelle frozen requirements
        pip install -r requirements.txt
        pip freeze > requirements-frozen.txt
        
        # Erstelle Deployment-Archiv
        mkdir -p dist
        tar -czf dist/schulbuddy-python-${{ github.sha }}.tar.gz \
          --exclude='.git' \
          --exclude='.github' \
          --exclude='__pycache__' \
          --exclude='*.pyc' \
          --exclude='.pytest_cache' \
          --exclude='htmlcov' \
          --exclude='instance' \
          --exclude='static/uploads' \
          --exclude='Dockerfile*' \
          --exclude='docker-compose*' \
          --exclude='.dockerignore' \
          .
    
    - name: Upload Python package
      uses: actions/upload-artifact@v4
      with:
        name: schulbuddy-python-package
        path: |
          dist/
          requirements-frozen.txt

  # Security Scans
  security-scan:
    needs: [docker-build, docker-test]
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    permissions:
      security-events: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build image for security scan
      run: |
        docker build -t schulbuddy:security-scan .
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'schulbuddy:security-scan'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Multi-platform build (nur f√ºr Releases)
  docker-build-multiplatform:
    needs: [docker-build, docker-test]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
    
    - name: Build and push multi-platform Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deployment Jobs
  deploy-staging:
    needs: [docker-test, python-package, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev'
    environment: staging
    
    steps:
    - name: Deploy Docker to staging
      run: |
        echo "üöÄ Deploying Docker image to staging..."
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:dev"
        echo "Digest: ${{ needs.docker-build.outputs.image-digest }}"
        
        # Beispiel-Deployment-Commands:
        # ssh user@staging "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:dev"
        # ssh user@staging "cd /app && docker-compose pull && docker-compose up -d"
    
    - name: Download Python package
      uses: actions/download-artifact@v4
      with:
        name: schulbuddy-python-package
    
    - name: Deploy Python package to staging
      run: |
        echo "üêç Deploying Python package to staging..."
        echo "Package: schulbuddy-python-${{ github.sha }}.tar.gz"
        
        # Beispiel-Deployment f√ºr Python:
        # scp dist/schulbuddy-python-${{ github.sha }}.tar.gz user@staging:/tmp/
        # ssh user@staging "cd /app && tar -xzf /tmp/schulbuddy-python-${{ github.sha }}.tar.gz && ./deploy-python.sh"

  deploy-production:
    needs: [docker-test, python-package, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Deploy Docker to production
      run: |
        echo "üè≠ Deploying Docker image to production..."
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main"
    
    - name: Download Python package
      uses: actions/download-artifact@v4
      with:
        name: schulbuddy-python-package
    
    - name: Deploy Python package to production
      run: |
        echo "üêç Deploying Python package to production..."
        echo "Package: schulbuddy-python-${{ github.sha }}.tar.gz"

  # Release erstellen bei Tags
  create-release:
    needs: [docker-test, python-package]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Download Python package
      uses: actions/download-artifact@v4
      with:
        name: schulbuddy-python-package
    
    - name: Create Release
      uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: SchulBuddy ${{ github.ref_name }}
        body: |
          ## üéì SchulBuddy Release ${{ github.ref_name }}
          
          ### üì¶ Verf√ºgbare Deployment-Optionen:
          
          #### üê≥ Docker Container (Empfohlen)
          ```bash
          # GitHub Container Registry
          docker pull ghcr.io/${{ github.repository }}:${{ github.ref_name }}
          
          # Mit Docker Compose
          docker-compose pull && docker-compose up -d
          ```
          
          #### üêç Python Package
          ```bash
          # Lade schulbuddy-python-package.tar.gz herunter und entpacke es
          tar -xzf schulbuddy-python-package.tar.gz
          cd schulbuddy
          pip install -r requirements-frozen.txt
          python app.py
          ```
          
          ### üîß Schnellstart
          ```bash
          # Docker (einfachste Methode)
          git clone https://github.com/${{ github.repository }}.git
          cd schulbuddy
          ./start.sh setup
          ./start.sh up
          ```
          
          ### üìã Changelog
          - Automatisches Release von GitHub Actions
          - Vollst√§ndige Docker und Python Deployment-Optionen
          - Security-Scans durchgef√ºhrt
          - Tests erfolgreich bestanden
        draft: false
        prerelease: false
    
    - name: Upload Python Package Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/schulbuddy-python-${{ github.sha }}.tar.gz
        asset_name: schulbuddy-python-package.tar.gz
        asset_content_type: application/gzip
