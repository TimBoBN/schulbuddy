name: Docker Build and Push to GHCR

on:
  push:
    branches: [ main, dev ]
    tags:
      - 'v*' # Wird ausgeführt, wenn Tags wie v1.0.0, v1.1.0 etc. gepusht werden
  
  # Manuelle Ausführung über die GitHub UI ermöglichen
  workflow_dispatch:
    inputs:
      version_tag:
        description: 'Version tag für das Docker Image (z.B. v1.1.0)'
        required: true
        default: 'latest'

jobs:
  docker-build-push:
    runs-on: ubuntu-latest
    
    # Wichtige Berechtigungen für GHCR
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract Version and Owner
        id: vars
        run: |
          # Extrahiere Version
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            # Manueller Trigger - verwende Input
            echo "VERSION=${{ github.event.inputs.version_tag }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            # Tag-Push - verwende Tag
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            # Branch-Push - verwende Branch-Namen
            BRANCH=${GITHUB_REF#refs/heads/}
            echo "VERSION=${BRANCH}-$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT
          fi
          
          # Repository Owner in Kleinbuchstaben
          echo "OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64,arm

      # Vorbereiten der Build-Umgebung für bessere Kompatibilität
      - name: Set up BuildKit Cache (AMD64)
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-ghcr-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-ghcr-
            
      # Spezifischer Cache für ARM-Builds
      - name: Set up BuildKit Cache (ARM)
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache-arm
          key: ${{ runner.os }}-buildx-ghcr-arm-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-ghcr-arm-
      
      # Verbesserte QEMU-Konfiguration
      - name: Set up QEMU emulation
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-user-static binfmt-support
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
          echo "Verifying QEMU installations:"
          ls -la /proc/sys/fs/binfmt_misc/
          
      # Zwei-stufiger Build-Prozess mit separaten Dockerfiles
      - name: Build and Push AMD64 Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64
          build-args: |
            BUILDKIT_INLINE_CACHE=1
          tags: |
            ghcr.io/${{ steps.vars.outputs.OWNER }}/schulbuddy:${{ steps.vars.outputs.VERSION }}-amd64
      
      - name: Build and Push ARM Images
        uses: docker/build-push-action@v4
        continue-on-error: true  # Erlaubt Fortfahren auch bei ARM-Fehlern
        with:
          context: .
          file: ./Dockerfile.arm
          push: true
          platforms: linux/arm64,linux/arm/v7
          build-args: |
            BUILDKIT_INLINE_CACHE=1
          cache-from: |
            type=local,src=/tmp/.buildx-cache-arm
            type=gha,scope=arm-build
          cache-to: |
            type=local,dest=/tmp/.buildx-cache-arm-new,mode=max
            type=gha,scope=arm-build,mode=max
          tags: |
            ghcr.io/${{ steps.vars.outputs.OWNER }}/schulbuddy:${{ steps.vars.outputs.VERSION }}-arm
      
      # Cache für nächste Builds verschieben
      - name: Move ARM cache
        if: always()  # Immer ausführen, auch bei Fehlern
        run: |
          rm -rf /tmp/.buildx-cache-arm
          mv /tmp/.buildx-cache-arm-new /tmp/.buildx-cache-arm || true
      
      # Erstellen des Multi-Arch-Manifests
      - name: Create and Push Multi-Arch Manifest
        if: success()
        run: |
          echo "Erstelle Multi-Arch Manifest"
          docker manifest create ghcr.io/${{ steps.vars.outputs.OWNER }}/schulbuddy:${{ steps.vars.outputs.VERSION }} \
            ghcr.io/${{ steps.vars.outputs.OWNER }}/schulbuddy:${{ steps.vars.outputs.VERSION }}-amd64 \
            ghcr.io/${{ steps.vars.outputs.OWNER }}/schulbuddy:${{ steps.vars.outputs.VERSION }}-arm || true
          
          # Auch Latest-Tag erstellen wenn main branch oder tag
          if [[ "${{ github.ref }}" == "refs/heads/main" || "${{ github.ref }}" == refs/tags/v* || "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.version_tag }}" != "dev" ]]; then
            docker manifest create ghcr.io/${{ steps.vars.outputs.OWNER }}/schulbuddy:latest \
              ghcr.io/${{ steps.vars.outputs.OWNER }}/schulbuddy:${{ steps.vars.outputs.VERSION }}-amd64 \
              ghcr.io/${{ steps.vars.outputs.OWNER }}/schulbuddy:${{ steps.vars.outputs.VERSION }}-arm || true
            
            docker manifest push ghcr.io/${{ steps.vars.outputs.OWNER }}/schulbuddy:latest || true
          fi
          
          # Dev-Tag erstellen wenn dev branch
          if [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            docker manifest create ghcr.io/${{ steps.vars.outputs.OWNER }}/schulbuddy:dev \
              ghcr.io/${{ steps.vars.outputs.OWNER }}/schulbuddy:${{ steps.vars.outputs.VERSION }}-amd64 \
              ghcr.io/${{ steps.vars.outputs.OWNER }}/schulbuddy:${{ steps.vars.outputs.VERSION }}-arm || true
            
            docker manifest push ghcr.io/${{ steps.vars.outputs.OWNER }}/schulbuddy:dev || true
          fi
          
          # Das Haupt-Manifest pushen
          docker manifest push ghcr.io/${{ steps.vars.outputs.OWNER }}/schulbuddy:${{ steps.vars.outputs.VERSION }} || true
          tags: |
            ghcr.io/${{ steps.vars.outputs.OWNER }}/schulbuddy:${{ steps.vars.outputs.VERSION }}
            ${{ (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && github.event.inputs.version_tag != 'dev')) && format('ghcr.io/{0}/schulbuddy:latest', steps.vars.outputs.OWNER) || '' }}
            ${{ github.ref == 'refs/heads/dev' && format('ghcr.io/{0}/schulbuddy:dev', steps.vars.outputs.OWNER) || '' }}
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.created=${{ github.event.repository.created_at }}
            org.opencontainers.image.revision=${{ github.sha }}
          # Lokalen Cache für GitHub Actions verwenden
          cache-from: |
            type=local,src=/tmp/.buildx-cache
            type=gha
          cache-to: |
            type=local,dest=/tmp/.buildx-cache-new,mode=max
            type=gha,mode=max
          # GitHub Actions spezifische Optionen
          provenance: false
          outputs: type=registry,compression=gzip

      # Cache aktualisieren für nächsten Lauf
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
