name: Docker Hub Publish

on:
  push:
    branches: [ main, dev ]
    tags:
      - 'v*' # Wird ausgeführt, wenn Tags wie v1.0.0, v1.1.0 etc. gepusht werden
  
  # Manueller Trigger über die GitHub UI
  workflow_dispatch:
    inputs:
      version_tag:
        description: 'Version tag für das Docker Image (z.B. v1.1.0)'
        required: true
        default: 'latest'

jobs:
  docker-hub-publish:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Extract Version
        id: vars
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            # Manueller Trigger - verwende Input
            echo "VERSION=${{ github.event.inputs.version_tag }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            # Tag-Push - verwende Tag
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            # Branch-Push - verwende Branch-Namen
            BRANCH=${GITHUB_REF#refs/heads/}
            echo "VERSION=${BRANCH}-$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT
          fi
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64,arm

      # Vorbereiten der Build-Umgebung für bessere Kompatibilität
      - name: Set up BuildKit Cache
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      
      # Lokalen QEMU-Zustand bereinigen für saubere Umgebung
      - name: Clean QEMU state
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-user-static
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          build-args: |
            BUILDKIT_INLINE_CACHE=1
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/schulbuddy:${{ steps.vars.outputs.VERSION }}
            ${{ (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && github.event.inputs.version_tag != 'dev')) && format('{0}/schulbuddy:latest', secrets.DOCKERHUB_USERNAME) || '' }}
            ${{ github.ref == 'refs/heads/dev' && format('{0}/schulbuddy:dev', secrets.DOCKERHUB_USERNAME) || '' }}
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.created=${{ github.event.repository.created_at }}
            org.opencontainers.image.revision=${{ github.sha }}
          # Lokalen Cache für GitHub Actions verwenden für bessere Performance
          cache-from: |
            type=local,src=/tmp/.buildx-cache
            type=gha
          cache-to: |
            type=local,dest=/tmp/.buildx-cache-new,mode=max
            type=gha,mode=max
          # GitHub Actions spezifische Optionen
          provenance: false
          outputs: type=registry,compression=gzip
          # No-fail Strategie für das erste Release
          allow-failure: true

      # Cache aktualisieren für nächsten Lauf
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
