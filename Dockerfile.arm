# SchulBuddy Dockerfile fÃ¼r ARM-Architekturen
# Feste Python-Version 3.11.7
FROM python:3.11.7-slim as builder

# Metadaten
LABEL org.opencontainers.image.source=https://github.com/TimBoBN/schulbuddy
LABEL org.opencontainers.image.description="SchulBuddy - Eine Anwendung zur Schulnotenerfassung und -verwaltung"
LABEL org.opencontainers.image.licenses=MIT

# Arbeitsverzeichnis setzen
WORKDIR /app

# Requirements kopieren
COPY requirements-arm.txt ./

# ARM-spezifische Dependencies installieren - ULTRA optimiert fÃ¼r schnellere Builds
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    gcc g++ libatlas-base-dev curl && \
    rm -rf /var/lib/apt/lists/*

# Separate Layer fÃ¼r pip-Upgrade fÃ¼r besseres Caching
RUN pip install --no-cache-dir --upgrade pip setuptools wheel

# Minimale Requirements Installation - Ohne pandas und reportlab fÃ¼r schnellsten Build
RUN pip install --no-cache-dir Flask==3.1.1 Werkzeug==3.1.3 \
    Flask-SQLAlchemy==3.0.5 Flask-Login==0.6.3 pyotp==2.8.0 \
    qrcode==7.4.2 pillow gunicorn==23.0.0 xlsxwriter==3.2.5

# Nur leere Stub-Module fÃ¼r pandas und reportlab - baut extrem schnell
RUN mkdir -p /usr/local/lib/python3.11/site-packages/pandas && \
    echo "# Stub fÃ¼r pandas" > /usr/local/lib/python3.11/site-packages/pandas/__init__.py && \
    echo "def DataFrame(*args, **kwargs): return None" >> /usr/local/lib/python3.11/site-packages/pandas/__init__.py && \
    mkdir -p /usr/local/lib/python3.11/site-packages/reportlab && \
    echo "# Stub fÃ¼r reportlab" > /usr/local/lib/python3.11/site-packages/reportlab/__init__.py

# Production Stage
FROM python:3.11.7-slim

# Arbeitsverzeichnis setzen
WORKDIR /app

# ARM-spezifische Pakete installieren
RUN apt-get update
RUN apt-get install -y curl libatlas-base-dev
RUN mkdir -p /usr/local/lib/python3.11/site-packages/
RUN rm -rf /var/lib/apt/lists/*

# Python-Pakete aus Builder kopieren
COPY --from=builder /usr/local/ /usr/local/

# pip und setuptools aktualisieren
RUN pip install --no-cache-dir --upgrade pip setuptools

# App-Code kopieren
COPY . .

# Entrypoint script erstellen
RUN echo '#!/bin/bash\n\
set -e\n\
\n\
echo "ðŸš€ Starting SchulBuddy Container on ARM..."\n\
\n\
# Verzeichnisse erstellen\n\
mkdir -p /app/data /app/static/uploads\n\
\n\
# Environment variables anzeigen\n\
echo "Environment: DOCKER_ENV=$DOCKER_ENV"\n\
echo "Database: $DATABASE_URL"\n\
echo "Port: $PORT"\n\
\n\
# Datenbank initialisieren falls nÃ¶tig\n\
if [ ! -f "/app/data/schulbuddy.db" ]; then\n\
    echo "ðŸ“‹ Initializing database..."\n\
    python /app/init_db.py\n\
fi\n\
\n\
# App starten mit angepasster Worker-Anzahl fÃ¼r ARM\n\
echo "ðŸŽ“ Starting SchulBuddy with Gunicorn on ARM architecture (port $PORT)..."\n\
export GUNICORN_WORKERS=2\n\
exec gunicorn --config gunicorn.conf.py wsgi:application\n\
' > entrypoint.sh && chmod +x entrypoint.sh

# Umgebungsvariablen und Port
ENV FLASK_APP=app.py \
    FLASK_ENV=production \
    DOCKER_ENV=1 \
    PYTHONPATH=/app

EXPOSE 5000

# Healthcheck
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:5000/health || exit 1

# Security hardening und Berechtigungen
RUN mkdir -p static/uploads instance data \
    && chmod -R 755 /app static/uploads instance data \
    && chmod 700 /app/entrypoint.sh \
    && find /app -type f -not -path "*/\.*" -not -path "*/data/*" -not -path "*/static/uploads/*" -exec chmod 644 {} \; \
    && rm -rf /tmp/* /var/tmp/* /var/cache/* /var/log/* \
    && adduser --disabled-password --gecos '' appuser \
    && chown -R appuser:appuser /app

# Non-root user
USER appuser

# Volumes
VOLUME ["/app/data", "/app/static/uploads"]

# Startkommando
CMD ["./entrypoint.sh"]
